#include <iostream>
#include <cmath>
#include <vector>

using namespace std;

/*
	https://en.wikipedia.org/wiki/Gaussian_elimination
*/

typedef vector<vector<int>> Matrix;

static vector<vector<int>> rules = {
	{ 0, 7, 10, 12, 13, 15, 18, 19, 21, 22, 25, 28, 29, 30, 31 },
	{ 1, 4, 7,  10, 11, 12, 14, 15, 16, 18, 21, 23, 25, 26, 28 },
	{ 2, 5, 8,  11, 13, 15, 16, 17, 19, 20, 22, 26, 27, 28, 29 },
	{ 3, 6, 9,  12, 14, 17, 18, 20, 21, 23, 24, 27, 28, 29, 30 },
	{ 3, 4, 8,  9,  11, 14, 17, 18, 22, 23, 24, 25, 26, 27, 29 },
	{ 0, 3, 5,  8,  10, 11, 14, 15, 17, 19, 20, 22, 24, 29, 30 },
	{ 1, 6, 9,  11, 12, 15, 16, 18, 20, 21, 23, 24, 25, 30, 31 },
	{ 2, 7, 8,  10, 13, 16, 17, 19, 21, 22, 24, 25, 26, 28, 31 },
	{ 2, 4, 5,  7,  8,  15, 17, 20, 21, 22, 23, 26, 27, 29, 30 },
	{ 2, 3, 4,  6,  7,  9,  12, 15, 17, 18, 20, 24, 26, 29, 31 },
	{ 0, 3, 5,  7,  10, 13, 18, 19, 20, 21, 24, 25, 27, 28, 30 },
	{ 1, 4, 6,  11, 14, 16, 19, 20, 21, 22, 25, 26, 28, 29, 31 },
	{ 0, 1, 3,  6,  11, 12, 16, 17, 18, 19, 21, 25, 26, 30, 31 },
	{ 0, 2, 3,  6,  7,  8,  11, 13, 16, 21, 22, 25, 27, 28, 30 },
	{ 1, 3, 4,  7,  9,  14, 16, 17, 22, 23, 24, 26, 28, 29, 31 },
	{ 0, 2, 5,  10, 15, 16, 17, 18, 20, 23, 24, 25, 27, 29, 30 },
	{ 2, 3, 5,  6,  9,  12, 13, 14, 15, 16, 23, 26, 28, 29, 31 },
	{ 0, 2, 5,  7,  9,  10, 12, 17, 20, 23, 26, 27, 28, 30, 31 },
	{ 0, 1, 3,  4,  6,  10, 11, 12, 13, 18, 21, 24, 27, 29, 31 },
	{ 1, 2, 4,  5,  7,  8,  11, 12, 13, 14, 19, 22, 25, 28, 30 },
	{ 1, 2, 6,  7,  8,  9,  10, 11, 13, 19, 20, 24, 25, 27, 30 },
	{ 1, 3, 4,  6,  8,  13, 14, 16, 19, 21, 24, 26, 27, 30, 31 },
	{ 0, 2, 4,  5,  7,  8,  9,  14, 15, 17, 22, 25, 27, 28, 31 },
	{ 0, 1, 3,  5,  6,  8,  9,  10, 12, 15, 18, 23, 24, 26, 29 },
	{ 1, 4, 5,  6,  7,  10, 11, 13, 14, 18, 20, 21, 23, 24, 31 },
	{ 1, 2, 4,  8,  10, 13, 15, 18, 19, 20, 22, 23, 25, 28, 31 },
	{ 2, 3, 4,  5,  8,  9,  11, 12, 14, 16, 19, 21, 23, 26, 29 },
	{ 0, 3, 4,  5,  6,  9,  10, 12, 13, 15, 17, 20, 22, 27, 30 },
	{ 0, 1, 2,  3,  5,  9,  10, 14, 15, 16, 17, 19, 22, 27, 28 },
	{ 0, 5, 6,  9,  11, 12, 14, 16, 18, 19, 22, 23, 24, 27, 29 },
	{ 0, 1, 6,  7,  8,  10, 12, 13, 15, 17, 19, 20, 23, 25, 30 },
	{ 0, 1, 2,  4,  7,  8,  9,  11, 13, 14, 16, 18, 21, 26, 31 }
};

static Matrix grid = {
	//0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
	{ 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1 },
	{ 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0 },
	{ 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0 },
	{ 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0 },
	{ 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0 },
	{ 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0 },
	{ 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1 },
	{ 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1 },
	{ 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0 },
	{ 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1 },
	{ 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0 },
	{ 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1 },
	{ 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1 },
	{ 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0 },
	{ 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1 },
	{ 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0 },
	{ 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1 },
	{ 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1 },
	{ 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
	{ 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0 },
	{ 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0 },
	{ 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1 },
	{ 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1 },
	{ 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0 },
	{ 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
	{ 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1 },
	{ 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0 },
	{ 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0 },
	{ 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0 },
	{ 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0 },
	{ 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0 },
	{ 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 }
};

void draw(const Matrix &g) {
	int i, j;
	
	for(i = 0; i < grid.size(); i++) {
		cout << "{ ";
		for(j = 0; j < grid[i].size(); j++) {
			cout << grid[i][j];
			
			if(j != grid[i].size() - 1)
				cout << ", ";
		}
		cout << " }," << endl;
	}
}

void draw_gaussian_grid() {
	int i, j, p;
	
	for(i = 0; i < rules.size(); i++) {
		p = 0;
		cout << "{ ";
		for(j = 0; j < 32; j++) {
			if(j == rules[i][p]) {
				cout << "1, ";
				p++;
			}
			else
				cout << "0, ";
		}
		cout << "}," << endl;
	}
}

void draw_conclusion(const Matrix &g) {
	int i, j;
	
	for(i = g.size() - 1; i >= 0; i--) {
		cout << "output[" << i << "] ^= "; 
		for(j = i + 1; j < g.size(); j++) {
			if(g[i][j] == 1)
				cout << "output[" << j << "] ^ ";
		}
		cout << endl;
	}
}

vector<int> f_xor(const vector<int> &a, const vector<int> &b) {
	int i;
	vector<int> r;
	
	for(i = 0; i < a.size(); i++)
		r.push_back(a[i] ^ b[i]);
	
	return r;
}

void update(Matrix &g) {
	int i, j;
	
	for(i = 0; i < g.size() - 1; i++) {
		for(j = i + 1; j < g.size() && g[i][i] == 0; j++) {
			if(g[j][i] == 1) {
				g[i] = f_xor(g[i], g[j]);
				cout << "output[" << i << "] ^= output[" << j << "];" << endl;
			}
		}
		
		for(j = i + 1; j < g.size(); j++) {
			if(g[j][i] == 1) {
				g[j] = f_xor(g[i], g[j]);
				cout << "output[" << j << "] ^= output[" << i << "];" << endl;
			}
		}
	}
}

int main() {
	//draw_gaussian_grid();
	
	update(grid);
	
	draw_conclusion(grid);
	
	return 0;
}